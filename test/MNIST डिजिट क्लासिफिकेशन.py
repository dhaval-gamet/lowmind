import lowmind as lm
import numpy as np

# рд╕рд░рд▓ рдиреНрдпреВрд░рд▓ рдиреЗрдЯрд╡рд░реНрдХ рдмрдирд╛рдПрдВ - FIXED VERSION
class SimpleNN(lm.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = lm.Linear(784, 128)  # 28x28 рдкрд┐рдХреНрд╕реЗрд▓ рдЗрдирдкреБрдЯ
        self.fc2 = lm.Linear(128, 64)
        self.fc3 = lm.Linear(64, 10)    # 10 рдХреНрд▓рд╛рд╕реЗрд╕ (0-9 рдбрд┐рдЬрд┐рдЯ)
        self.dropout = lm.Dropout(0.2)
    
    def forward(self, x):
        # FIXED: reshape рдХреЛ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ use рдХрд░реЗрдВ
        if hasattr(x, 'data'):
            # Tensor object рд╣реИ
            x_reshaped = x.reshape((-1, 784))  # tuple рдореЗрдВ pass рдХрд░реЗрдВ
        else:
            # numpy array рд╣реИ
            x_reshaped = lm.Tensor(x.reshape(-1, 784))
        
        x = self.fc1(x_reshaped).relu()
        x = self.dropout(x)
        x = self.fc2(x).relu()
        x = self.fc3(x)
        return x

# рд╕реЙрдлреНрдЯрдореИрдХреНрд╕ рдлрдВрдХреНрд╢рди
def softmax(x):
    """рд╕реЙрдлреНрдЯрдореИрдХреНрд╕ рдлрдВрдХреНрд╢рди"""
    if hasattr(x, 'data'):
        # Tensor object
        exp_x = np.exp(x.data - np.max(x.data))
        softmax_val = exp_x / np.sum(exp_x, axis=-1, keepdims=True)
        return lm.Tensor(softmax_val)
    else:
        # numpy array
        exp_x = np.exp(x - np.max(x))
        return exp_x / np.sum(exp_x, axis=-1, keepdims=True)

# рдЯреНрд░реЗрдирд┐рдВрдЧ рдлрдВрдХреНрд╢рди - IMPROVED VERSION
def train_simple_model():
    print("ЁЯЪА LowMind рдХреЗ рд╕рд╛рде рд╕рд░рд▓ рдореЙрдбрд▓ рдЯреНрд░реЗрдирд┐рдВрдЧ рд╢реБрд░реВ...")
    
    # рдореЙрдбрд▓ рдФрд░ рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝рд░ рдмрдирд╛рдПрдВ
    model = SimpleNN()
    optimizer = lm.SGD(model.parameters(), lr=0.01)
    
    # рдмреЗрд╣рддрд░ рдбреЗрдЯрд╛ рдЬреЗрдирд░реЗрдЯ рдХрд░реЗрдВ (рд╕рд╣реА shape рдХреЗ рд╕рд╛рде)
    batch_size = 32
    x_train = lm.Tensor(np.random.randn(batch_size, 784))  # рд╕реАрдзреЗ flattened
    y_train = lm.Tensor(np.random.randint(0, 10, (batch_size,)))
    
    print(f"ЁЯУК рдбреЗрдЯрд╛ рд╢реЗрдк: {x_train.shape}")
    print(f"ЁЯОп рд▓реЗрдмрд▓ рд╢реЗрдк: {y_train.shape}")
    print(f"ЁЯФв рдореЙрдбрд▓ рдкреИрд░рд╛рдореАрдЯрд░реНрд╕: {sum(np.prod(param.data.shape) for param in model.parameters())}")
    
    # рдЯреНрд░реЗрдирд┐рдВрдЧ рд▓реВрдк
    epochs = 3
    for epoch in range(epochs):
        # рдлреЙрд░рд╡рд░реНрдб рдкрд╛рд╕
        outputs = model(x_train)
        loss = lm.cross_entropy_loss(outputs, y_train)
        
        # рдмреИрдХрд╡рд░реНрдб рдкрд╛рд╕
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        print(f"ЁЯУИ Epoch {epoch+1}/{epochs}, Loss: {loss.item():.4f}")
    
    return model

# рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдлрдВрдХреНрд╢рди
def predict_digit(model, image_data):
    """рдирдП рдбрд┐рдЬрд┐рдЯ рдХреА рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдХрд░реЗрдВ"""
    model.eval()  # рдПрд╡рд▓реНрдпреВрдПрд╢рди рдореЛрдб
    
    # рдЗрдирдкреБрдЯ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
    if isinstance(image_data, np.ndarray):
        if image_data.ndim == 3:  # (1, 28, 28) рдЬреИрд╕рд╛ shape
            image_data = image_data.reshape(1, -1)  # flatten рдХрд░реЗрдВ
        input_tensor = lm.Tensor(image_data)
    else:
        input_tensor = lm.Tensor(np.array(image_data).reshape(1, -1))
    
    # рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдХрд░реЗрдВ
    with lm.memory_trace("Prediction"):
        output = model(input_tensor)
        probabilities = softmax(output)
        predicted_class = np.argmax(probabilities.data if hasattr(probabilities, 'data') else probabilities)
    
    return predicted_class, probabilities

# рдЯреЗрд╕реНрдЯ рдлрдВрдХреНрд╢рди
def test_model(model):
    """рдореЙрдбрд▓ рдХреЛ рдЯреЗрд╕реНрдЯ рдХрд░реЗрдВ"""
    print("\nЁЯзк рдореЙрдбрд▓ рдЯреЗрд╕реНрдЯрд┐рдВрдЧ...")
    
    # рдЯреЗрд╕реНрдЯ рдбреЗрдЯрд╛
    test_images = np.random.randn(5, 784)  # 5 рдЯреЗрд╕реНрдЯ рдЗрдореЗрдЬреЗрд╕
    test_labels = np.random.randint(0, 10, (5,))
    
    correct = 0
    for i, (img, label) in enumerate(zip(test_images, test_labels)):
        pred, probs = predict_digit(model, img)
        
        # рд╕рдмрд╕реЗ high probability рд╡рд╛рд▓рд╛ class
        max_prob = np.max(probs.data if hasattr(probs, 'data') else probs)
        
        status = "тЬЕ" if pred == label else "тЭМ"
        print(f"{status} рдЯреЗрд╕реНрдЯ {i+1}: рдкреНрд░реЗрдбрд┐рдХреНрдЯреЗрдб {pred}, рдПрдХреНрдЪреБрдЕрд▓ {label}, рдХреЙрдиреНрдлрд┐рдбреЗрдВрд╕: {max_prob:.3f}")
        
        if pred == label:
            correct += 1
    
    accuracy = correct / len(test_images) * 100
    print(f"ЁЯУК рдПрдХреНрдпреВрд░реЗрд╕реА: {accuracy:.1f}%")

# рдореБрдЦреНрдп рдкреНрд░реЛрдЧреНрд░рд╛рдо
if __name__ == "__main__":
    print("=" * 50)
    print("          LowMind рдбреЗрдореЛ рдкреНрд░реЛрдЧреНрд░рд╛рдо - FIXED VERSION")
    print("=" * 50)
    
    # рд╕рд┐рд╕реНрдЯрдо рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдХрд░реЗрдВ
    monitor = lm.RaspberryPiAdvancedMonitor()
    monitor.print_detailed_status()
    
    try:
        # рдореЙрдбрд▓ рдЯреНрд░реЗрди рдХрд░реЗрдВ
        trained_model = train_simple_model()
        
        print("\n" + "=" * 50)
        print("           рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдЯреЗрд╕реНрдЯ")
        print("=" * 50)
        
        # рдЯреЗрд╕реНрдЯ рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдХрд░реЗрдВ
        test_image = np.random.randn(1, 784)  # рдкрд╣рд▓реЗ рд╕реЗ flattened рдЯреЗрд╕реНрдЯ рдЗрдореЗрдЬ
        predicted_digit, probabilities = predict_digit(trained_model, test_image)
        
        print(f"ЁЯФо рдкреНрд░реЗрдбрд┐рдХреНрдЯреЗрдб рдбрд┐рдЬрд┐рдЯ: {predicted_digit}")
        
        # рдкреНрд░реЛрдмреЗрдмрд┐рд▓рд┐рдЯреАрдЬ display рдХрд░реЗрдВ
        prob_array = probabilities.data if hasattr(probabilities, 'data') else probabilities
        print(f"ЁЯУК рдЯреЙрдк 3 рдкреНрд░реЗрдбрд┐рдХреНрд╢рди:")
        top_indices = np.argsort(prob_array[0])[-3:][::-1]
        for idx in top_indices:
            print(f"   рдбрд┐рдЬрд┐рдЯ {idx}: {prob_array[0][idx]:.3f}")
        
        # рдореЙрдбрд▓ рдЯреЗрд╕реНрдЯрд┐рдВрдЧ
        test_model(trained_model)
        
    except Exception as e:
        print(f"тЭМ Error: {e}")
        print("ЁЯФз Debugging info:")
        import traceback
        traceback.print_exc()
    
    # рдлрд╛рдЗрдирд▓ рдореЗрдореЛрд░реА рд╕реНрдЯреЗрдЯрд╕
    print("\n" + "=" * 50)
    print("           рдлрд╛рдЗрдирд▓ рд╕реНрдЯреЗрдЯрд╕")
    print("=" * 50)
    monitor.update_monitoring()
    monitor.print_detailed_status()
    
    health_score = monitor.get_health_score()
    print(f"ЁЯПе рдлрд╛рдЗрдирд▓ рд╣реЗрд▓реНрде рд╕реНрдХреЛрд░: {health_score:.1f}/100")
    
    print("\nЁЯОЙ рдкреНрд░реЛрдЧреНрд░рд╛рдо рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░рд╛ рд╣реБрдЖ!")