import lowmind as lm
import numpy as np

# рдмрд╣реБрдд рд╣реА рд╕рд░рд▓ рд░реЗрдЧреНрд░реЗрд╢рди рдЙрджрд╛рд╣рд░рдг
def simple_regression_demo():
    print("ЁЯУИ рд╕рд░рд▓ рд░реЗрдЧреНрд░реЗрд╢рди рдбреЗрдореЛ")
    
    # рд╕рд░рд▓ рдбреЗрдЯрд╛: y = 2x + 1
    x_data = np.array([[1], [2], [3], [4]], dtype=np.float32)
    y_data = np.array([[3], [5], [7], [9]], dtype=np.float32)
    
    # рд╕рд░рд▓ рд▓реАрдирд┐рдпрд░ рдореЙрдбрд▓
    model = lm.Linear(1, 1)  # 1 рдЗрдирдкреБрдЯ, 1 рдЖрдЙрдЯрдкреБрдЯ
    optimizer = lm.SGD(model.parameters(), lr=0.01)
    
    # рдЯреНрд░реЗрдирд┐рдВрдЧ
    for epoch in range(100):
        total_loss = 0
        for x, y in zip(x_data, y_data):
            x_tensor = lm.Tensor([x])
            y_tensor = lm.Tensor([y])
            
            # рдлреЙрд░рд╡рд░реНрдб рдкрд╛рд╕
            pred = model(x_tensor)
            loss = lm.mse_loss(pred, y_tensor)
            
            # рдмреИрдХрд╡рд░реНрдб рдкрд╛рд╕
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            
            total_loss += loss.item()
        
        if epoch % 20 == 0:
            print(f"Epoch {epoch}, Loss: {total_loss/len(x_data):.4f}")
    
    # рдЯреЗрд╕реНрдЯ рдкреНрд░реЗрдбрд┐рдХреНрд╢рди
    test_x = lm.Tensor([[5.0]])
    prediction = model(test_x)
    print(f"ЁЯУК рдЗрдирдкреБрдЯ: 5, рдкреНрд░реЗрдбрд┐рдХреНрд╢рди: {prediction.item():.2f}, рдПрдХреНрд╕реНрдкреЗрдХреНрдЯреЗрдб: 11")
    
    # рд╡реЗрдЯ рдкреНрд░рд┐рдВрдЯ рдХрд░реЗрдВ
    print(f"ЁЯФН рдЯреНрд░реЗрдВрдб рд╡реЗрдЯ: {model.weight.data}, рдмрд╛рдпрд╕: {model.bias.data}")

# рд░рди рдХрд░реЗрдВ
if __name__ == "__main__":
    simple_regression_demo()