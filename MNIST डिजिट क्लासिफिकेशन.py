import lowmind as lm
import numpy as np

# рд╕рд░рд▓ рдиреНрдпреВрд░рд▓ рдиреЗрдЯрд╡рд░реНрдХ рдмрдирд╛рдПрдВ
class SimpleNN(lm.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = lm.Linear(784, 128)  # 28x28 рдкрд┐рдХреНрд╕реЗрд▓ рдЗрдирдкреБрдЯ
        self.fc2 = lm.Linear(128, 64)
        self.fc3 = lm.Linear(64, 10)    # 10 рдХреНрд▓рд╛рд╕реЗрд╕ (0-9 рдбрд┐рдЬрд┐рдЯ)
        self.dropout = lm.Dropout(0.2)
    
    def forward(self, x):
        x = x.reshape(-1, 784)  # рдлреНрд▓реИрдЯрди рдХрд░реЗрдВ
        x = self.fc1(x).relu()
        x = self.dropout(x)
        x = self.fc2(x).relu()
        x = self.fc3(x)
        return x

# рдЯреНрд░реЗрдирд┐рдВрдЧ рдлрдВрдХреНрд╢рди
def train_simple_model():
    print("ЁЯЪА LowMind рдХреЗ рд╕рд╛рде рд╕рд░рд▓ рдореЙрдбрд▓ рдЯреНрд░реЗрдирд┐рдВрдЧ рд╢реБрд░реВ...")
    
    # рдореЙрдбрд▓ рдФрд░ рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝рд░ рдмрдирд╛рдПрдВ
    model = SimpleNN()
    optimizer = lm.SGD(model.parameters(), lr=0.01)
    
    # рд╕рд┐рдВрдкрд▓ рдбреЗрдЯрд╛ рдЬреЗрдирд░реЗрдЯ рдХрд░реЗрдВ (рдбрдореА рдбреЗрдЯрд╛)
    batch_size = 32
    x_train = lm.Tensor(np.random.randn(batch_size, 1, 28, 28))
    y_train = lm.Tensor(np.random.randint(0, 10, (batch_size,)))
    
    print(f"ЁЯУК рдбреЗрдЯрд╛ рд╢реЗрдк: {x_train.shape}")
    print(f"ЁЯОп рд▓реЗрдмрд▓ рд╢реЗрдк: {y_train.shape}")
    
    # рдЯреНрд░реЗрдирд┐рдВрдЧ рд▓реВрдк
    epochs = 3
    for epoch in range(epochs):
        # рдлреЙрд░рд╡рд░реНрдб рдкрд╛рд╕
        outputs = model(x_train)
        loss = lm.cross_entropy_loss(outputs, y_train)
        
        # рдмреИрдХрд╡рд░реНрдб рдкрд╛рд╕
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        print(f"ЁЯУИ Epoch {epoch+1}/{epochs}, Loss: {loss.item():.4f}")
    
    return model

# рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдлрдВрдХреНрд╢рди
def predict_digit(model, image_data):
    """рдирдП рдбрд┐рдЬрд┐рдЯ рдХреА рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдХрд░реЗрдВ"""
    model.eval()  # рдПрд╡рд▓реНрдпреВрдПрд╢рди рдореЛрдб
    
    # рдЗрдирдкреБрдЯ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
    if isinstance(image_data, np.ndarray):
        input_tensor = lm.Tensor(image_data)
    else:
        input_tensor = lm.Tensor(np.array(image_data))
    
    # рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдХрд░реЗрдВ
    with lm.memory_trace("Prediction"):
        output = model(input_tensor)
        probabilities = lm.softmax(output)
        predicted_class = np.argmax(probabilities.data)
    
    return predicted_class, probabilities.data

# рд╕реЙрдлреНрдЯрдореИрдХреНрд╕ рдлрдВрдХреНрд╢рди (рдЕрддрд┐рд░рд┐рдХреНрдд)
def softmax(x):
    """рд╕реЙрдлреНрдЯрдореИрдХреНрд╕ рдлрдВрдХреНрд╢рди"""
    exp_x = np.exp(x.data - np.max(x.data))
    return lm.Tensor(exp_x / np.sum(exp_x, axis=-1, keepdims=True))

# рдореБрдЦреНрдп рдкреНрд░реЛрдЧреНрд░рд╛рдо
if __name__ == "__main__":
    print("=" * 50)
    print("          LowMind рдбреЗрдореЛ рдкреНрд░реЛрдЧреНрд░рд╛рдо")
    print("=" * 50)
    
    # рд╕рд┐рд╕реНрдЯрдо рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдХрд░реЗрдВ
    monitor = lm.RaspberryPiAdvancedMonitor()
    monitor.print_detailed_status()
    
    # рдореЙрдбрд▓ рдЯреНрд░реЗрди рдХрд░реЗрдВ
    trained_model = train_simple_model()
    
    print("\n" + "=" * 50)
    print("           рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдЯреЗрд╕реНрдЯ")
    print("=" * 50)
    
    # рдЯреЗрд╕реНрдЯ рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдХрд░реЗрдВ
    test_image = np.random.randn(1, 28, 28)  # рдбрдореА рдЯреЗрд╕реНрдЯ рдЗрдореЗрдЬ
    predicted_digit, probabilities = predict_digit(trained_model, test_image)
    
    print(f"ЁЯФо рдкреНрд░реЗрдбрд┐рдХреНрдЯреЗрдб рдбрд┐рдЬрд┐рдЯ: {predicted_digit}")
    print(f"ЁЯУК рдкреНрд░реЛрдмреЗрдмрд┐рд▓рд┐рдЯреАрдЬ: {probabilities}")
    
    # рдлрд╛рдЗрдирд▓ рдореЗрдореЛрд░реА рд╕реНрдЯреЗрдЯрд╕
    print("\n" + "=" * 50)
    print("           рдлрд╛рдЗрдирд▓ рд╕реНрдЯреЗрдЯрд╕")
    print("=" * 50)
    monitor.update_monitoring()
    monitor.print_detailed_status()
    
    health_score = monitor.get_health_score()
    print(f"ЁЯПе рдлрд╛рдЗрдирд▓ рд╣реЗрд▓реНрде рд╕реНрдХреЛрд░: {health_score:.1f}/100")
    
    print("\nЁЯОЙ рдкреНрд░реЛрдЧреНрд░рд╛рдо рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░рд╛ рд╣реБрдЖ!")